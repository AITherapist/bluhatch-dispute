import { NextRequest, NextResponse } from 'next/server';
import { createClientComponentClient } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    const supabase = createClientComponentClient();

    // Get the current user
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const formData = await request.formData();
    const file = formData.get('file') as File;
    const jobId = formData.get('job_id') as string;
    const clientName = formData.get('client_name') as string;

    if (!file || !jobId || !clientName) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Verify job ownership
    const { data: job, error: jobError } = await supabase
      .from('jobs')
      .select('id')
      .eq('id', jobId)
      .eq('user_id', user.id)
      .single();

    if (jobError || !job) {
      return NextResponse.json({ error: 'Job not found' }, { status: 404 });
    }

    // Upload approval photo
    const fileName = `approvals/${user.id}/${jobId}/${Date.now()}-${file.name}`;
    const { error: uploadError } = await supabase.storage
      .from('evidence-files')
      .upload(fileName, file, {
        contentType: file.type,
        upsert: false,
      });

    if (uploadError) {
      console.error('Error uploading approval photo:', uploadError);
      return NextResponse.json(
        { error: 'Failed to upload photo' },
        { status: 500 }
      );
    }

    // Get public URL
    const { data: urlData } = supabase.storage
      .from('evidence-files')
      .getPublicUrl(fileName);

    // Create evidence item for approval
    const { data: evidence, error: evidenceError } = await supabase
      .from('evidence_items')
      .insert({
        job_id: jobId,
        evidence_type: 'approval',
        file_path: urlData.publicUrl,
        file_hash: '', // Will be generated by the system
        description: `Client approval photo from ${clientName}`,
        client_approval: true,
        client_signature: null,
        device_timestamp: new Date().toISOString(),
        server_timestamp: new Date().toISOString(),
      })
      .select()
      .single();

    if (evidenceError) {
      console.error('Error creating approval evidence:', evidenceError);
      return NextResponse.json(
        { error: 'Failed to create approval evidence' },
        { status: 500 }
      );
    }

    // Log the approval action
    await supabase.from('audit_logs').insert({
      user_id: user.id,
      action: 'client_approval_photo',
      details: {
        job_id: jobId,
        client_name: clientName,
        evidence_id: evidence.id,
      },
      created_at: new Date().toISOString(),
    });

    return NextResponse.json({
      success: true,
      data: evidence,
    });
  } catch (error) {
    console.error('Approval photo upload error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
